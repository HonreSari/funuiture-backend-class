// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  AUTHOR
}

enum Status {
  ACTIVE
  INACTIVE
  FREEZE
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(52)
  posts    Post[]
  products Product[]
}

model Type {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(52)
  posts    Post[]
  products Product[]
}

model Post {
  id         Int       @id @default(autoincrement())
  title      String    @db.VarChar(255)
  content    String
  body       String
  image      String
  authorId   Int
  author     User      @relation(fields: [authorId], references: [id]) //one-to-many relation with User
  categoryId Int
  category   Category  @relation(fields: [categoryId], references: [id]) //one-to-many relation with Category
  typeId     Int
  type       Type      @relation(fields: [typeId], references: [id]) //one-to-many relation with Type
  published  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  tags       PostTag[]
}

model Product {
  id          Int              @id @default(autoincrement())
  name        String           @db.VarChar(255)
  description String
  price       Decimal          @db.Decimal(10, 2)
  discount    Decimal          @default(0) @db.Decimal(10, 2)
  rating      Int              @default(0) @db.SmallInt
  inventory   Int              @default(0)
  status      Status           @default(ACTIVE)
  categoryId  Int
  category    Category         @relation(fields: [categoryId], references: [id]) //one-to-many relation with Category
  typeId      Int
  type        Type             @relation(fields: [typeId], references: [id]) //one-to-many relation with Type
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  images      Image[]
  orders      ProductOnOrder[]
  tags        ProductTag[]
}

model Image {
  id        Int     @id @default(autoincrement())
  path      String  @db.VarChar(255)
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade) //one-to-many relation with Product
}

model User {
  id              Int       @id @default(autoincrement())
  firstName       String?   @db.VarChar(52)
  lastName        String?   @db.VarChar(52)
  phone           String    @unique @db.VarChar(15)
  password        String
  email           String?   @unique @db.VarChar(52)
  role            Role      @default(USER)
  status          Status    @default(ACTIVE)
  lastLogin       DateTime?
  errorLoginCount Int       @default(0) @db.SmallInt
  randomToken     String
  image           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  posts           Post[]
  orders          Order[]
}

model PostTag {
  id    Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(52)
  posts Post[]
}

model ProductTag {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(52)
  products Product[]
}

// model Tag {
//   id      Int        @id @default(autoincrement())
//   name    String     @unique @db.VarChar(52)
//   taggabe Taggable[]
// }

// model Taggable {
//   id     Int    @id @default(autoincrement())
//   tagId  Int
//   tag    Tag    @relation(fields: [tagId], references: [id]) //one-to-many relation with Tag
//   type   String @db.VarChar(7) //Post, Product
//   typeId Int
// }

model Order {
  id         Int              @id @default(autoincrement())
  userId     Int
  user       User             @relation(fields: [userId], references: [id]) //one-to-many relation with User
  code       String           @db.VarChar(15)
  totalPrice Decimal          @db.Decimal(10, 2)
  status     Status           @default(ACTIVE)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  products   ProductOnOrder[]
}

model ProductOnOrder {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id]) //one-to-many relation with Order
  productId Int
  product   Product @relation(fields: [productId], references: [id]) //one-to-many relation with Product
  quantity  Int     @db.SmallInt
  price     Decimal @db.Decimal(10, 2)
}

model Otp {
  id            Int      @id @default(autoincrement())
  phone         String   @unique @db.VarChar(15)
  otp           String
  rememberToken String
  verifyToken   String?
  count         Int      @default(0) @db.SmallInt
  error         Int      @default(0) @db.SmallInt
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Setting {
  id    Int    @id @default(autoincrement())
  key   String @unique @db.VarChar(50)
  value String @db.VarChar(255)
}
